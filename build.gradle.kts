plugins {
  id("uk.gov.justice.hmpps.gradle-spring-boot") version "3.1.5"
  kotlin("plugin.spring") version "1.4.32"
  kotlin("plugin.jpa") version "1.4.32"
  kotlin("kapt") version "1.4.32"

  id("org.unbroken-dome.test-sets") version "3.0.1"
  id("org.openapi.generator") version "5.1.0"
  idea
}

val deliusApiSpec = "$buildDir/generated/delius-api.spec.json"
val generatedSrc = "src/generated/kotlin"

testSets {
  create("e2e")
}

sourceSets {
  val main by getting
  val generateApiSpec by creating {
    val classpath = main.output.filter { !it.endsWith("resources/main") }
    compileClasspath += classpath
    runtimeClasspath += classpath
  }
  val generated by creating {
    java.srcDirs += File("$projectDir/$generatedSrc")
  }
  val e2e by getting {
    compileClasspath += generated.output
    runtimeClasspath += generated.output
  }
}

configure<org.jlleitschuh.gradle.ktlint.KtlintExtension> {
  filter {
    exclude { it.file.path.contains("generated/") }
  }
}

tasks {
  val generateApiSpec by creating(JavaExec::class) {
    main = "uk.gov.justice.digital.hmpps.deliusapi.GenerateApiSpecKt"
    classpath = sourceSets.getByName("generateApiSpec").runtimeClasspath
    systemProperty("uk.gov.justice.digital.hmpps.deliusapi.specpath", deliusApiSpec)
    outputs.file(deliusApiSpec)
  }
  val openApiGenerate by getting {
    dependsOn += generateApiSpec
    inputs.file(deliusApiSpec)
  }
  val compileGeneratedKotlin by getting {
    dependsOn += openApiGenerate
  }
  val e2e by getting {
    dependsOn += compileGeneratedKotlin
  }

  val clean by getting {
    doFirst {
      delete("$projectDir/$generatedSrc")
    }
  }

  val ideaModule by getting {
    dependsOn += openApiGenerate
  }

  withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().all {
    kotlinOptions {
      jvmTarget = "1.8"
    }
  }
}

openApiGenerate {
  generatorName.set("kotlin")
  inputSpec.set(deliusApiSpec)
  outputDir.set(projectDir.toString())
  apiPackage.set("uk.gov.justice.digital.hmpps.deliusapi.client.api")
  invokerPackage.set("uk.gov.justice.digital.hmpps.deliusapi.client.invoker")
  modelPackage.set("uk.gov.justice.digital.hmpps.deliusapi.client.model")
  configOptions.put("dateLibrary", "java8-localdatetime") // just "java8" is not appropriate as we are not parsing offsets
  additionalProperties.put("sourceFolder", generatedSrc)
}

dependencyCheck {
  skipConfigurations.add("_classStructurekaptTestKotlin")
}

configurations {
  testImplementation { exclude(group = "org.junit.vintage") }
  val generatedImplementation by getting
  val e2eImplementation by getting {
    extendsFrom(generatedImplementation)
  }
  val generateApiSpecImplementation by getting {
    val implementation by getting
    extendsFrom(implementation)
  }
}

dependencies {
  implementation("org.springframework.boot:spring-boot-starter-webflux")
  implementation("org.springframework.boot:spring-boot-starter-data-jpa")
  implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
  implementation("io.springfox:springfox-boot-starter:3.0.0")
  implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.12.2")
  implementation("com.github.java-json-tools:json-patch:1.13")

  implementation("org.flywaydb:flyway-core:7.7.1")
  implementation("com.zaxxer:HikariCP:4.0.3")
  implementation("com.h2database:h2")
  implementation("com.oracle.database.jdbc:ojdbc10:19.10.0.0")

  implementation("org.mapstruct:mapstruct:1.4.2.Final")
  kapt("org.mapstruct:mapstruct-processor:1.4.2.Final")

  developmentOnly("org.springframework.boot:spring-boot-devtools")
  kapt("org.springframework.boot:spring-boot-configuration-processor")

  testImplementation("io.jsonwebtoken:jjwt:0.9.1")
  testImplementation("com.github.tomakehurst:wiremock-standalone:2.27.2")
  testImplementation("com.github.javafaker:javafaker:1.0.2")

  "generatedImplementation"("com.squareup.okhttp3:okhttp:4.9.0")
  "generatedImplementation"("com.squareup.moshi:moshi-kotlin:1.12.0")

  "generateApiSpecImplementation"("org.springframework:spring-test")
}
