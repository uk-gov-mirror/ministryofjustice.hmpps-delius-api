version: 2.1

orbs:
  owasp: entur/owasp@0.0.10
  hmpps: ministryofjustice/hmpps@2.2
  mem: circleci/rememborb@0.0.1
  aws-ecs: circleci/aws-ecs@0.0.10
  aws-cli: circleci/aws-cli@1.3.2
  queue: eddiewebb/queue@1.5.0
  slack: circleci/slack@4.1.3
commands:
  configure_profile:
    parameters:
      profile-name:
        type: string
      role-arn:
        type: string
    steps:
      - run:
          name: Configure credentials profile
          command: |
            aws configure set role_arn "<<parameters.role-arn>>" --profile <<parameters.profile-name>>
            aws configure set source_profile default --profile <<parameters.profile-name>>
  # This is a workaround for the aws-ecs/update-service CircleCI command not taking a profile parameter, and the underlying aws cli command not honouring the AWS_PROFILE env var.
  # See https://github.com/CircleCI-Public/aws-ecs-orb/issues/41 for further details
  assume_role:
    parameters:
      role-arn:
        type: string
    steps:
      - run:
          name: Assume IAM role
          command: |
            temp_role=$(aws sts assume-role --role-arn <<parameters.role-arn>> --role-session-name "role_session")
            echo "export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)" >> $BASH_ENV; source $BASH_ENV;
            echo "export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)" >> $BASH_ENV; source $BASH_ENV;
            echo "export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)" >> $BASH_ENV; source $BASH_ENV;
  deploy_to_env:
    parameters:
      role-arn:
        type: string
      family:
        type: string
      cluster-name:
        type: string
      service-name:
        type: string
      env-name:
        type: string
    steps:
      - mem/recall:
          env_var: APP_VERSION
      - aws-cli/setup
      - assume_role:
          role-arn: <<parameters.role-arn>>
      - aws-ecs/update-service:
          family: <<parameters.family>>
          cluster-name: <<parameters.cluster-name>>
          service-name: <<parameters.service-name>>
          container-image-name-updates: container=delius-api,tag=$APP_VERSION
          verify-revision-is-deployed: true
      - slack/notify:
          event: always
          channel: delius-api-notifications
          custom: |
              {
                "blocks": [
                  {
                    "type": "context",
                    "elements": [
                      {
                        "type": "mrkdwn",
                        "text": ":circleci-${CCI_STATUS}: CircleCI deploy ${CCI_STATUS}"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*${CIRCLE_PROJECT_REPONAME}* version `${APP_VERSION}` deploy to *<< parameters.env-name >>*"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  }
                ]
              } 

jobs:
  validate:
    executor: hmpps/java
    environment:
      _JAVA_OPTIONS: -Xmx1024m -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -XX:ParallelGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2 -Dorg.gradle.daemon=false
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          command: ./gradlew build
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - run:
          name: "Get the Veracode agent"
          command: |
            wget https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/21.2.7.4/vosp-api-wrappers-java-21.2.7.4.jar -O VeracodeJavaAPI.jar
      - run:
          name: "Upload to Veracode"
          command: java -jar VeracodeJavaAPI.jar
            -vid $VERACODE_API_ID
            -vkey $VERACODE_API_KEY
            -action uploadandscan
            -appname $CIRCLE_PROJECT_REPONAME
            -createprofile true
            -version CircleCI-$CIRCLE_BUILD_NUM
            -filepath /app/build/libs/hmpps-delius-api-*.jar
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests
      - store_artifacts:
          path: build/libs
  build_docker:
    docker:
       - image: circleci/python
    steps:
      - checkout
      - hmpps/create_app_version
      - setup_remote_docker:
          docker_layer_caching: true
      - aws-cli/setup:
          profile-name: default
      - configure_profile:
          profile-name: engineering_dev
          role-arn: $ROLE_ARN_PUSH_DOCKER_IMAGE
      # Currently the aws-ecr orb does not support logging in/ pushing to public repos
      - run:
          name: Docker Image
          command: |
            aws ecr-public get-login-password --region us-east-1 --profile engineering_dev| docker login --username AWS --password-stdin $AWS_ECS_ACCOUNT_URL
            docker build --tag $AWS_ECS_ACCOUNT_URL/delius-api:$APP_VERSION \
              --label "app.version=${APP_VERSION}" \
              --label "build.version=${APP_VERSION}" \
              --label "build.number=${CIRCLE_BUILD_NUM}" \
              --label "build.url=${CIRCLE_BUILD_URL}" \
              --label "build.gitref=${CIRCLE_SHA1}" .
            docker push $AWS_ECS_ACCOUNT_URL/delius-api:$APP_VERSION
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Tag latest
                command: |
                  docker tag "$AWS_ECS_ACCOUNT_URL/delius-api:$APP_VERSION" "$AWS_ECS_ACCOUNT_URL/delius-api:latest"
                  docker push $AWS_ECS_ACCOUNT_URL/delius-api:latest
  deploy-dev:
    docker:
      - image: circleci/python
    steps:
      - queue/until_front_of_line:
          consider-branch: false
          time: '10'
      - deploy_to_env:
          role-arn: $ROLE_ARN_DEPLOY_DEV
          family: dlc-dev-delius-api-task-definition
          cluster-name: dlc-dlc-dev-ecscluster-private-ecs
          service-name: dlc-dev-delius-api-service
          env-name: delius-core-dev
  deploy-test:
    docker:
      - image: circleci/python
    steps:
      - deploy_to_env:
          role-arn: $ROLE_ARN_DEPLOY_TEST
          family: del-test-delius-api-task-definition
          cluster-name: del-delius-ecscluster-private-ecs
          service-name: del-test-delius-api-service
          env-name: delius-test
  deploy-stage:
    docker:
      - image: circleci/python
    steps:
      - deploy_to_env:
          role-arn: $ROLE_ARN_DEPLOY_STAGE
          family: del-stage-delius-api-task-definition
          cluster-name: del-delius-ecscluster-private-ecs
          service-name: del-stage-delius-api-service
          env-name: delius-stage
  deploy-prod:
    docker:
      - image: circleci/python
    steps:
      - deploy_to_env:
          role-arn: $ROLE_ARN_DEPLOY_PROD
          family: del-prod-delius-api-task-definition
          cluster-name: del-prod-ecscluster-private-ecs
          service-name: del-prod-delius-api-service
          env-name: delius-prod

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - validate:
          filters:
            tags:
              ignore: /.*/
      - build_docker:
          requires:
            - validate
      - deploy-dev:
          requires:
            - build_docker
          context:
            - moj-slack-notifications          
      - deploy-test:
          filters:
            branches:
              only:
                - main
          requires:
            - validate
            - build_docker
          context:
            - moj-slack-notifications            
      - request-stage-approval:
          type: approval
          requires:
            - deploy-test
      - deploy-stage:
          requires:
            - request-stage-approval
          context:
            - moj-slack-notifications
      - request-prod-approval:
          type: approval
          requires:
            - deploy-stage
      - deploy-prod:
          requires:
            - request-prod-approval
          context:
            - moj-slack-notifications

  scheduled:
    triggers:
      - schedule:
          cron: "0 7 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - owasp/gradle_owasp_dependency_check:
          executor: hmpps/java
